<script>
  function convertAnsiToHtml(text) {
    let result = text;
    let stack = [];
    
    result = result.replace(/\x1B\[([0-9;]+)m/g, function(match, p1) {
      const codes = p1.split(';');
      let html = '';
      
      codes.forEach(code => {
        code = parseInt(code);
        if (code === 0) {
          // Reset
          while (stack.length > 0) {
            html += '</span>';
            stack.pop();
          }
        } else if (code === 1) {
          html += '<span style="font-weight:bold">';
          stack.push('bold');
        } else if (code === 3) {
          html += '<span style="font-style:italic">';
          stack.push('italic');
        } else if (code === 4) {
          html += '<span style="text-decoration:underline">';
          stack.push('underline');
        } else {
          let color = '';
          if (code >= 30 && code <= 37) {
            color = `ansi-${getColorName(code - 30)}-fg`;
          } else if (code >= 40 && code <= 47) {
            color = `ansi-${getColorName(code - 40)}-bg`;
          } else if (code >= 90 && code <= 97) {
            color = `ansi-bright-${getColorName(code - 90)}-fg`;
          }
          if (color) {
            html += `<span class="${color}">`;
            stack.push(color);
          }
        }
      });
      
      return html;
    });
    
    while (stack.length > 0) {
      result += '</span>';
      stack.pop();
    }
    
    return result;
  }

  function getColorName(code) {
    const colors = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'];
    return colors[code];
  }

  function colorizeLogMessage(message) {
    const parts = message.split(' | ');
    if (parts.length < 2) return message;

    const timestamp = parts[0];
    const level = parts[1];
    const restMessage = parts.slice(2).join(' | ');

    let coloredMessage = restMessage;

    // Adjusted color scheme - brighter and more readable
    const methodColorMap = {
      'GET': '#00ff00',     // Bright Green
      'POST': '#3b82f6',    // Bright Blue
      'PUT': '#ffd700',     // Gold
      'DELETE': '#ff4444',  // Bright Red
      'PATCH': '#ff00ff',   // Bright Purple
      'OPTIONS': '#00ffff'  // Bright Cyan
    };

    // Replace HTTP methods and API paths
    Object.entries(methodColorMap).forEach(([method, color]) => {
      coloredMessage = coloredMessage.replace(
        new RegExp(`(${method})\\s+(/[^\\s|]+)`, 'g'), 
        (match, m, path) => `<span style="color: ${color}">${m}</span> <span style="color: #87ceeb">${path}</span>`
      );
    });

    // Colorize status code
    coloredMessage = coloredMessage.replace(
      /Status: (\d+)/g,
      (match, code) => {
        const color = code >= 400 ? '#ff4444' : // Bright Red
                     code >= 300 ? '#ffd700' : // Gold
                     '#00ff00';  // Bright Green
        return `Status: <span style="color: ${color}">${code}</span>`;
      }
    );

    // Colorize Origin
    const validOrigins = [
      // 'https://example.com'
    ];
    coloredMessage = coloredMessage.replace(
      /Origin: ([^,\n]+)/g,
      (match, origin) => {
        const color = origin.includes('Unknown') ? '#ffd700' : // Gold
                     validOrigins.some(valid => origin.includes(valid)) ? '#00ff00' : // Bright Green
                     '#ffffff'; // White
        return `Origin: <span style="color: ${color}">${origin}</span>`;
      }
    );

    // Colorize IP
    coloredMessage = coloredMessage.replace(
      /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|Unknown IP)/g,
      `<span style="color: #ffa07a">$1</span>` // Light Salmon
    );

    return `<span style="color: #ffffff">${timestamp} | ${level}</span> | ${coloredMessage}`;
  }
  
  function viewLogs(host) {
    const logDiv = document.getElementById('log');
    logDiv.innerHTML = 'Connecting...';
    
    // If there is an existing connection, close the old one first
    if (window.currentEventSource) {
      window.currentEventSource.close();
    }
    
    // Use the new API path
    const source = new EventSource(`/api/container/logs?host=${encodeURIComponent(host)}`, {
      withCredentials: true
    });
    window.currentEventSource = source;
    
    source.onmessage = function(event) {
      const newLog = document.createElement('div');
      newLog.innerHTML = colorizeLogMessage(event.data);
      logDiv.appendChild(newLog);
      
      // Limit log entries
      while (logDiv.children.length > 1000) {
        logDiv.removeChild(logDiv.firstChild);
      }
      
      // Auto scroll to bottom
      if (logDiv.scrollTop + logDiv.clientHeight >= logDiv.scrollHeight - 100) {
        logDiv.scrollTop = logDiv.scrollHeight;
      }
    };

    source.onerror = function(event) {
      source.close();
      window.currentEventSource = null;
      logDiv.innerHTML += '<div style="color: #ff4444">Connection closed</div>';
    };
  }

  // Clean up the connection when the page unloads
  window.addEventListener('beforeunload', () => {
    if (window.currentEventSource) {
      window.currentEventSource.close();
    }
  });
</script>