<%- contentFor('body') %>
<div class="w-full h-full">
  <h1 class="text-3xl font-bold mb-4">Select Host to View Logs</h1>
  
  <!-- 將選擇器包在 flex 容器中 -->
  <div class="flex gap-4 mb-4">
    <!-- 標籤篩選器 -->
    <div>
      <select id="tagFilter" class="select select-bordered w-48" onchange="filterHosts()">
        <option value="">所有標籤</option>
        <% if (Array.isArray(tags)) { %>
          <% tags.forEach(tag => { %>
            <option value="<%= tag %>"><%= tag %></option>
          <% }); %>
        <% } %>
      </select>
    </div>

    <!-- 容器選擇器 -->
    <div>
      <select id="hostSelect" class="select select-bordered w-96" onchange="onHostSelect(this.value)">
        <option value="">選擇容器</option>
        <% if (Array.isArray(hosts) && hosts.length > 0) { %>
          <% hosts.forEach(host => { %>
            <option value="<%= host.host_name %>" 
                    data-tags="<%= host.tags %>"
                    data-container="<%= host.container_name %>"
                    data-host="<%= host.host %>">
              <%= host.container_name %> (<%= host.host %>)
              <% if (host.tags) { %>
                [<%= host.tags %>]
              <% } %>
            </option>
          <% }); %>
        <% } %>
      </select>
    </div>
  </div>

  <div class="container h-[calc(100vh-12rem)]">
    <div id="log" class="w-full bg-gray-900 text-gray-200 text-xs p-3 h-full overflow-y-scroll font-mono whitespace-pre-wrap break-words"></div>
  </div>
</div>

<script>
let currentEventSource = null;

// 根據標籤篩選容器選項
function filterHosts() {
  const tagFilter = document.getElementById('tagFilter');
  const hostSelect = document.getElementById('hostSelect');
  const selectedTag = tagFilter.value;
  
  Array.from(hostSelect.options).forEach(option => {
    if (option.value === '') return; // 跳過預設選項
    
    const hostTags = option.getAttribute('data-tags');
    if (!selectedTag || hostTags?.includes(selectedTag)) {
      option.style.display = '';
    } else {
      option.style.display = 'none';
    }
  });
  
  // 如果當前選中的選項被隱藏了，重置選擇
  if (hostSelect.selectedOptions[0].style.display === 'none') {
    hostSelect.value = '';
    if (currentEventSource) {
      currentEventSource.close();
      currentEventSource = null;
      document.getElementById('log').innerHTML = '';
    }
  }
}

// 當選擇容器時觸發日誌查看
function onHostSelect(hostName) {
  if (!hostName) {
    if (currentEventSource) {
      currentEventSource.close();
      currentEventSource = null;
      document.getElementById('log').innerHTML = '';
    }
    return;
  }
  viewLogs(hostName);
}

// 原有的 viewLogs 功能保持不變
function viewLogs(hostName) {
  console.log('Viewing logs for host:', hostName); // 新增除錯日誌
  const logElement = document.getElementById('log');
  logElement.innerHTML = '正在連接...';
  
  // 如果已有連接，先關閉
  if (currentEventSource) {
    currentEventSource.close();
  }
  
  // 使用新的 API 路徑
  const eventSource = new EventSource(`/api/container/logs?host=${encodeURIComponent(hostName)}`, {
    withCredentials: true
  });
  
  currentEventSource = eventSource;
  
  eventSource.onmessage = function(event) {
    if (logElement.innerHTML === '正在連接...') {
      logElement.innerHTML = '';
    }
    const newLog = document.createElement('div');
    newLog.innerHTML = event.data; // 使用 innerHTML 以支援著色
    logElement.appendChild(newLog);
    
    // 滾動到底部
    logElement.scrollTop = logElement.scrollHeight;
  };
  
  eventSource.onerror = function(error) {
    console.error('EventSource failed:', error);
    if (currentEventSource) {
      currentEventSource.close();
      currentEventSource = null;
      logElement.innerHTML += '<div class="text-red-500">連接已關閉</div>';
    }
  };
}

// 頁面卸載時清理連接
window.addEventListener('beforeunload', () => {
  if (currentEventSource) {
    currentEventSource.close();
  }
});
</script>

<%- include('partials/logs-script') %>
