<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Docker Logs Viewer</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* ANSI 顏色支援 */
    .ansi-black-fg { color: #000000; }
    .ansi-red-fg { color: #cd0000; }
    .ansi-green-fg { color: #00cd00; }
    .ansi-yellow-fg { color: #cdcd00; }
    .ansi-blue-fg { color: #0000ee; }
    .ansi-magenta-fg { color: #cd00cd; }
    .ansi-cyan-fg { color: #00cdcd; }
    .ansi-white-fg { color: #e5e5e5; }
    .ansi-bright-black-fg { color: #7f7f7f; }
    .ansi-bright-red-fg { color: #ff0000; }
    .ansi-bright-green-fg { color: #00ff00; }
    .ansi-bright-yellow-fg { color: #ffff00; }
    .ansi-bright-blue-fg { color: #5c5cff; }
    .ansi-bright-magenta-fg { color: #ff00ff; }
    .ansi-bright-cyan-fg { color: #00ffff; }
    .ansi-bright-white-fg { color: #ffffff; }
    
    .ansi-black-bg { background-color: #000000; }
    .ansi-red-bg { background-color: #cd0000; }
    .ansi-green-bg { background-color: #00cd00; }
    .ansi-yellow-bg { background-color: #cdcd00; }
    .ansi-blue-bg { background-color: #0000ee; }
    .ansi-magenta-bg { background-color: #cd00cd; }
    .ansi-cyan-bg { background-color: #00cdcd; }
    .ansi-white-bg { background-color: #e5e5e5; }
  </style>
  <script>
    function convertAnsiToHtml(text) {
      let result = text;
      let stack = [];
      
      result = result.replace(/\x1B\[([0-9;]+)m/g, function(match, p1) {
        const codes = p1.split(';');
        let html = '';
        
        codes.forEach(code => {
          code = parseInt(code);
          if (code === 0) {
            // Reset
            while (stack.length > 0) {
              html += '</span>';
              stack.pop();
            }
          } else if (code === 1) {
            html += '<span style="font-weight:bold">';
            stack.push('bold');
          } else if (code === 3) {
            html += '<span style="font-style:italic">';
            stack.push('italic');
          } else if (code === 4) {
            html += '<span style="text-decoration:underline">';
            stack.push('underline');
          } else {
            let color = '';
            if (code >= 30 && code <= 37) {
              color = `ansi-${getColorName(code - 30)}-fg`;
            } else if (code >= 40 && code <= 47) {
              color = `ansi-${getColorName(code - 40)}-bg`;
            } else if (code >= 90 && code <= 97) {
              color = `ansi-bright-${getColorName(code - 90)}-fg`;
            }
            if (color) {
              html += `<span class="${color}">`;
              stack.push(color);
            }
          }
        });
        
        return html;
      });
      
      // 關閉所有剩餘的標籤
      while (stack.length > 0) {
        result += '</span>';
        stack.pop();
      }
      
      return result;
    }

    function getColorName(code) {
      const colors = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'];
      return colors[code];
    }

    // 新增日誌關鍵字著色函數
    function colorizeLogMessage(message) {
      const parts = message.split(' | ');
      if (parts.length < 2) return message;

      const timestamp = parts[0];
      const level = parts[1];
      const restMessage = parts.slice(2).join(' | ');

      let coloredMessage = restMessage;

      // 調整後的顏色方案 - 更明亮更易讀
      const methodColorMap = {
        'GET': '#00ff00',     // 亮綠
        'POST': '#3b82f6',    // 亮藍
        'PUT': '#ffd700',     // 金黃
        'DELETE': '#ff4444',  // 亮紅
        'PATCH': '#ff00ff',   // 亮紫
        'OPTIONS': '#00ffff'  // 亮青
      };

      // 替換 HTTP 方法和 API 路徑
      Object.entries(methodColorMap).forEach(([method, color]) => {
        coloredMessage = coloredMessage.replace(
          new RegExp(`(${method})\\s+(/[^\\s|]+)`, 'g'), 
          (match, m, path) => `<span style="color: ${color}">${m}</span> <span style="color: #87ceeb">${path}</span>`
        );
      });

      // 狀態碼著色 - 調整顏色
      coloredMessage = coloredMessage.replace(
        /Status: (\d+)/g,
        (match, code) => {
          const color = code >= 400 ? '#ff4444' : // 亮紅
                       code >= 300 ? '#ffd700' : // 金黃
                       '#00ff00';  // 亮綠
          return `Status: <span style="color: ${color}">${code}</span>`;
        }
      );

      // Origin 著色 - 調整顏色
      const validOrigins = [
        'https://boanhealth.com',
        'https://dev.boanhealth.com',
        'http://localhost:3000'
      ];
      coloredMessage = coloredMessage.replace(
        /Origin: ([^,\n]+)/g,
        (match, origin) => {
          const color = origin.includes('Unknown') ? '#ffd700' : // 金黃
                       validOrigins.some(valid => origin.includes(valid)) ? '#00ff00' : // 亮綠
                       '#ffffff'; // 白色
          return `Origin: <span style="color: ${color}">${origin}</span>`;
        }
      );

      // IP 著色 - 調整為更明亮的橘色
      coloredMessage = coloredMessage.replace(
        /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|Unknown IP)/g,
        `<span style="color: #ffa07a">$1</span>` // 亮鮭魚色
      );

      // 時間戳和日誌等級使用更明亮的白色
      return `<span style="color: #ffffff">${timestamp} | ${level}</span> | ${coloredMessage}`;
    }
    
    function viewLogs(host) {
      const logDiv = document.getElementById('log');
      logDiv.innerHTML = '';
      
      const source = new EventSource(`/logs?host=${encodeURIComponent(host)}`);
      source.onmessage = function(event) {
        const newLog = document.createElement('div');
        // 改用 colorizeLogMessage 替代 convertAnsiToHtml
        newLog.innerHTML = colorizeLogMessage(event.data);
        logDiv.appendChild(newLog);
        
        // 只保留最後 1000 行
        while (logDiv.children.length > 1000) {
          logDiv.removeChild(logDiv.firstChild);
        }
        
        // 如果滾動條接近底部，則自動滾動
        if (logDiv.scrollTop + logDiv.clientHeight >= logDiv.scrollHeight - 100) {
          logDiv.scrollTop = logDiv.scrollHeight;
        }
      };

      source.onerror = function(event) {
        console.error('EventSource failed:', event);
        source.close();
      };
    }
  </script>
</head>
<body class="bg-gray-100 flex flex-col items-center">
  <h1 class="text-3xl font-bold mb-4">Select Host to View Logs</h1>
  <div class="mb-4">
    <% hosts.forEach(host => { %>
      <button onclick="viewLogs('<%= host.name %>')" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
        <%= host.name %>
      </button>
    <% }); %>
  </div>
  <div class="container flex justify-center items-center" >
    <div id="log" class="w-full bg-gray-900 text-gray-200 text-xs 
     p-3 h-[600px] overflow-y-scroll font-mono whitespace-pre-wrap break-words"
     ></div>
  </div>
</body>
</html>